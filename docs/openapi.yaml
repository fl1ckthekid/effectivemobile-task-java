openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/users:
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user-controller
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/cards:
    get:
      tags:
        - card-controller
      operationId: getUserCards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCardResponseDto'
    post:
      tags:
        - card-controller
      operationId: createCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequestDto'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardResponseDto'
  /api/cards/{id}/request-block:
    post:
      tags:
        - card-controller
      operationId: requestCardBlock
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/cards/{id}/block:
    post:
      tags:
        - card-controller
      operationId: blockCardByAdmin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/cards/{id}/activate:
    post:
      tags:
        - card-controller
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/cards/transfer:
    post:
      tags:
        - card-controller
      operationId: transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardTransferRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/auth/register:
    post:
      tags:
        - auth-controller
      operationId: register
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/auth/login:
    post:
      tags:
        - auth-controller
      operationId: login
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards/{id}/balance:
    get:
      tags:
        - card-controller
      operationId: getBalance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards/all:
    get:
      tags:
        - card-controller
      operationId: getAllCards
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponseDto'
  /api/users/{id}:
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/cards/{id}:
    delete:
      tags:
        - card-controller
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
components:
  schemas:
    UserDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - USER
              - ADMIN
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - USER
              - ADMIN
    CardRequestDto:
      type: object
      properties:
        owner:
          type: string
        cardNumber:
          type: string
        expirationDate:
          type: string
          format: date
    CardResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedNumber:
          type: string
        owner:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
    CardTransferRequest:
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
    PageCardResponseDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponseDto'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean